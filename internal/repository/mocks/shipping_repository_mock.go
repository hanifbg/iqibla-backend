// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/shipping.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	response "github.com/hanifbg/landing_backend/internal/model/response"
)

// MockShippingRepository is a mock of ShippingRepository interface.
type MockShippingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShippingRepositoryMockRecorder
}

// MockShippingRepositoryMockRecorder is the mock recorder for MockShippingRepository.
type MockShippingRepositoryMockRecorder struct {
	mock *MockShippingRepository
}

// NewMockShippingRepository creates a new mock instance.
func NewMockShippingRepository(ctrl *gomock.Controller) *MockShippingRepository {
	mock := &MockShippingRepository{ctrl: ctrl}
	mock.recorder = &MockShippingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShippingRepository) EXPECT() *MockShippingRepositoryMockRecorder {
	return m.recorder
}

// CalculateShippingCost mocks base method.
func (m *MockShippingRepository) CalculateShippingCost(origin, destination string, weight int, courier string) ([]response.RajaOngkirCost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateShippingCost", origin, destination, weight, courier)
	ret0, _ := ret[0].([]response.RajaOngkirCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateShippingCost indicates an expected call of CalculateShippingCost.
func (mr *MockShippingRepositoryMockRecorder) CalculateShippingCost(origin, destination, weight, courier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateShippingCost", reflect.TypeOf((*MockShippingRepository)(nil).CalculateShippingCost), origin, destination, weight, courier)
}

// GetCities mocks base method.
func (m *MockShippingRepository) GetCities(provinceID, cityID string) ([]response.RajaOngkirCity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCities", provinceID, cityID)
	ret0, _ := ret[0].([]response.RajaOngkirCity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCities indicates an expected call of GetCities.
func (mr *MockShippingRepositoryMockRecorder) GetCities(provinceID, cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCities", reflect.TypeOf((*MockShippingRepository)(nil).GetCities), provinceID, cityID)
}

// GetDistricts mocks base method.
func (m *MockShippingRepository) GetDistricts(cityID string) ([]response.RajaOngkirDistrict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistricts", cityID)
	ret0, _ := ret[0].([]response.RajaOngkirDistrict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistricts indicates an expected call of GetDistricts.
func (mr *MockShippingRepositoryMockRecorder) GetDistricts(cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistricts", reflect.TypeOf((*MockShippingRepository)(nil).GetDistricts), cityID)
}

// GetProvinces mocks base method.
func (m *MockShippingRepository) GetProvinces(provinceID string) ([]response.RajaOngkirProvince, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvinces", provinceID)
	ret0, _ := ret[0].([]response.RajaOngkirProvince)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvinces indicates an expected call of GetProvinces.
func (mr *MockShippingRepositoryMockRecorder) GetProvinces(provinceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvinces", reflect.TypeOf((*MockShippingRepository)(nil).GetProvinces), provinceID)
}

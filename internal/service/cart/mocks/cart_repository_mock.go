// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hanifbg/landing_backend/internal/repository (interfaces: CartRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/hanifbg/landing_backend/internal/model/entity"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// CreateCart mocks base method.
func (m *MockCartRepository) CreateCart(arg0 *entity.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartRepositoryMockRecorder) CreateCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartRepository)(nil).CreateCart), arg0)
}

// CreateCartItem mocks base method.
func (m *MockCartRepository) CreateCartItem(arg0 *entity.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartItem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCartItem indicates an expected call of CreateCartItem.
func (mr *MockCartRepositoryMockRecorder) CreateCartItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartItem", reflect.TypeOf((*MockCartRepository)(nil).CreateCartItem), arg0)
}

// DeleteCartItem mocks base method.
func (m *MockCartRepository) DeleteCartItem(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartItem indicates an expected call of DeleteCartItem.
func (mr *MockCartRepositoryMockRecorder) DeleteCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItem", reflect.TypeOf((*MockCartRepository)(nil).DeleteCartItem), arg0, arg1)
}

// FindCartByID mocks base method.
func (m *MockCartRepository) FindCartByID(arg0 string) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartByID", arg0)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartByID indicates an expected call of FindCartByID.
func (mr *MockCartRepositoryMockRecorder) FindCartByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartByID", reflect.TypeOf((*MockCartRepository)(nil).FindCartByID), arg0)
}

// FindCartItem mocks base method.
func (m *MockCartRepository) FindCartItem(arg0, arg1 string) (*entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartItem", arg0, arg1)
	ret0, _ := ret[0].(*entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartItem indicates an expected call of FindCartItem.
func (mr *MockCartRepositoryMockRecorder) FindCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartItem", reflect.TypeOf((*MockCartRepository)(nil).FindCartItem), arg0, arg1)
}

// GetCartItemsByCartID mocks base method.
func (m *MockCartRepository) GetCartItemsByCartID(arg0 string) ([]entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemsByCartID", arg0)
	ret0, _ := ret[0].([]entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemsByCartID indicates an expected call of GetCartItemsByCartID.
func (mr *MockCartRepositoryMockRecorder) GetCartItemsByCartID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemsByCartID", reflect.TypeOf((*MockCartRepository)(nil).GetCartItemsByCartID), arg0)
}

// GetCartWithItems mocks base method.
func (m *MockCartRepository) GetCartWithItems(arg0 string) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartWithItems", arg0)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartWithItems indicates an expected call of GetCartWithItems.
func (mr *MockCartRepositoryMockRecorder) GetCartWithItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartWithItems", reflect.TypeOf((*MockCartRepository)(nil).GetCartWithItems), arg0)
}

// GetDiscountByCode mocks base method.
func (m *MockCartRepository) GetDiscountByCode(arg0 string) (*entity.Discount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscountByCode", arg0)
	ret0, _ := ret[0].(*entity.Discount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscountByCode indicates an expected call of GetDiscountByCode.
func (mr *MockCartRepositoryMockRecorder) GetDiscountByCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscountByCode", reflect.TypeOf((*MockCartRepository)(nil).GetDiscountByCode), arg0)
}

// GetProductVariantByID mocks base method.
func (m *MockCartRepository) GetProductVariantByID(arg0 string) (*entity.ProductVariant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductVariantByID", arg0)
	ret0, _ := ret[0].(*entity.ProductVariant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductVariantByID indicates an expected call of GetProductVariantByID.
func (mr *MockCartRepositoryMockRecorder) GetProductVariantByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductVariantByID", reflect.TypeOf((*MockCartRepository)(nil).GetProductVariantByID), arg0)
}

// UpdateCartItem mocks base method.
func (m *MockCartRepository) UpdateCartItem(arg0 *entity.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartItem indicates an expected call of UpdateCartItem.
func (mr *MockCartRepositoryMockRecorder) UpdateCartItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItem", reflect.TypeOf((*MockCartRepository)(nil).UpdateCartItem), arg0)
}
// Code generated by MockGen. DO NOT EDIT.
// Source: d:\\Code Store\\Github\\iqibla-backend\\internal\\repository\\payment.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/hanifbg/landing_backend/internal/model/entity"
)

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// GetSeq implements repository.PaymentRepository.
func (m *MockPaymentRepository) GetSeq() (int64, error) {
	panic("unimplemented")
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockPaymentRepository) CreateOrder(order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockPaymentRepositoryMockRecorder) CreateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockPaymentRepository)(nil).CreateOrder), order)
}

// CreateOrderItem mocks base method.
func (m *MockPaymentRepository) CreateOrderItem(item *entity.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockPaymentRepositoryMockRecorder) CreateOrderItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockPaymentRepository)(nil).CreateOrderItem), item)
}

// CreateOrderWithItems mocks base method.
func (m *MockPaymentRepository) CreateOrderWithItems(order *entity.Order, items []entity.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderWithItems", order, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderWithItems indicates an expected call of CreateOrderWithItems.
func (mr *MockPaymentRepositoryMockRecorder) CreateOrderWithItems(order, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderWithItems", reflect.TypeOf((*MockPaymentRepository)(nil).CreateOrderWithItems), order, items)
}

// CreatePayment mocks base method.
func (m *MockPaymentRepository) CreatePayment(payment *entity.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentRepositoryMockRecorder) CreatePayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentRepository)(nil).CreatePayment), payment)
}

// FindOrderByID mocks base method.
func (m *MockPaymentRepository) FindOrderByID(orderID string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderByID", orderID)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderByID indicates an expected call of FindOrderByID.
func (mr *MockPaymentRepositoryMockRecorder) FindOrderByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderByID", reflect.TypeOf((*MockPaymentRepository)(nil).FindOrderByID), orderID)
}

// FindPaymentByID mocks base method.
func (m *MockPaymentRepository) FindPaymentByID(paymentID string) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPaymentByID", paymentID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPaymentByID indicates an expected call of FindPaymentByID.
func (mr *MockPaymentRepositoryMockRecorder) FindPaymentByID(paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPaymentByID", reflect.TypeOf((*MockPaymentRepository)(nil).FindPaymentByID), paymentID)
}

// FindPaymentByOrderID mocks base method.
func (m *MockPaymentRepository) FindPaymentByOrderID(orderID string) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPaymentByOrderID", orderID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPaymentByOrderID indicates an expected call of FindPaymentByOrderID.
func (mr *MockPaymentRepositoryMockRecorder) FindPaymentByOrderID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPaymentByOrderID", reflect.TypeOf((*MockPaymentRepository)(nil).FindPaymentByOrderID), orderID)
}

// FindPaymentByTransactionID mocks base method.
func (m *MockPaymentRepository) FindPaymentByTransactionID(transactionID string) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPaymentByTransactionID", transactionID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPaymentByTransactionID indicates an expected call of FindPaymentByTransactionID.
func (mr *MockPaymentRepositoryMockRecorder) FindPaymentByTransactionID(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPaymentByTransactionID", reflect.TypeOf((*MockPaymentRepository)(nil).FindPaymentByTransactionID), transactionID)
}

// GetOrderWithItems mocks base method.
func (m *MockPaymentRepository) GetOrderWithItems(orderID string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderWithItems", orderID)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderWithItems indicates an expected call of GetOrderWithItems.
func (mr *MockPaymentRepositoryMockRecorder) GetOrderWithItems(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderWithItems", reflect.TypeOf((*MockPaymentRepository)(nil).GetOrderWithItems), orderID)
}

// UpdateOrderStatus mocks base method.
func (m *MockPaymentRepository) UpdateOrderStatus(orderID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockPaymentRepositoryMockRecorder) UpdateOrderStatus(orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockPaymentRepository)(nil).UpdateOrderStatus), orderID, status)
}

// UpdatePayment mocks base method.
func (m *MockPaymentRepository) UpdatePayment(payment *entity.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayment", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockPaymentRepositoryMockRecorder) UpdatePayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockPaymentRepository)(nil).UpdatePayment), payment)
}

// UpdatePaymentAndOrderStatus mocks base method.
func (m *MockPaymentRepository) UpdatePaymentAndOrderStatus(payment *entity.Payment, orderID, orderStatus string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentAndOrderStatus", payment, orderID, orderStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentAndOrderStatus indicates an expected call of UpdatePaymentAndOrderStatus.
func (mr *MockPaymentRepositoryMockRecorder) UpdatePaymentAndOrderStatus(payment, orderID, orderStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentAndOrderStatus", reflect.TypeOf((*MockPaymentRepository)(nil).UpdatePaymentAndOrderStatus), payment, orderID, orderStatus)
}

// UpdatePaymentStatus mocks base method.
func (m *MockPaymentRepository) UpdatePaymentStatus(paymentID string, status entity.PaymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", paymentID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockPaymentRepositoryMockRecorder) UpdatePaymentStatus(paymentID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockPaymentRepository)(nil).UpdatePaymentStatus), paymentID, status)
}

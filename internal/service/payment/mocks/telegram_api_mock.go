// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hanifbg/landing_backend/internal/repository (interfaces: TelegramAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	response "github.com/hanifbg/landing_backend/internal/model/response"
)

// MockTelegramAPI is a mock of TelegramAPI interface.
type MockTelegramAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramAPIMockRecorder
}

// MockTelegramAPIMockRecorder is the mock recorder for MockTelegramAPI.
type MockTelegramAPIMockRecorder struct {
	mock *MockTelegramAPI
}

// NewMockTelegramAPI creates a new mock instance.
func NewMockTelegramAPI(ctrl *gomock.Controller) *MockTelegramAPI {
	mock := &MockTelegramAPI{ctrl: ctrl}
	mock.recorder = &MockTelegramAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramAPI) EXPECT() *MockTelegramAPIMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockTelegramAPI) SendMessage(arg0 context.Context, arg1, arg2 int64, arg3 string) (*response.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*response.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTelegramAPIMockRecorder) SendMessage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTelegramAPI)(nil).SendMessage), arg0, arg1, arg2, arg3)
}
